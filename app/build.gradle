import groovy.json.JsonSlurper

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.google.protobuf' version '0.9.0'
    id 'dagger.hilt.android.plugin'
    id 'com.google.firebase.crashlytics'
}

static buildConfigString(String string) {
    return "\"${string}\""
}

static createBaseURL(String host, Boolean secure) {
    def protocol = secure ? "https" : "http"
    return "${protocol}://${host}/"
}

android {
    namespace application.id
    compileSdkVersion buildOptions.compileSdkVersion
    buildToolsVersion buildOptions.buildToolsVersion
    flavorDimensions "environment"

    defaultConfig {
        applicationId application.id
        minSdkVersion buildOptions.minSdkVersion
        targetSdkVersion buildOptions.targetSdkVersion
        versionCode application.versionCode
        versionName application.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        def signingConfigPath = "../config/signing/"
        debug {
            def credsFilePath = file(signingConfigPath.concat("dev.json"))
            def credsFile = credsFilePath.getText('UTF-8')
            def json = new JsonSlurper().parseText(credsFile)
            storeFile file(signingConfigPath.concat(json.android.storeFile))
            storePassword json.android.storePassword
            keyAlias json.android.keyAlias
            keyPassword json.android.keyPassword
        }
        release {
            def credsFilePath = file(signingConfigPath.concat("dev.json"))
            if (credsFilePath.canRead()) {
                def credsFile = credsFilePath.getText('UTF-8')
                def json = new JsonSlurper().parseText(credsFile)
                storeFile file(signingConfigPath.concat(json.android.storeFile))
                storePassword json.android.storePassword
                keyAlias json.android.keyAlias
                keyPassword json.android.keyPassword
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            minifyEnabled false
            shrinkResources false
            manifestPlaceholders.put(buildVariables.manifestPlaceholder.crashCollectionEnabled, false)
        }
        internal {
            signingConfig signingConfigs.debug
            debuggable false
            minifyEnabled releaseSettings.minifyEnabled
            shrinkResources releaseSettings.shrinkResources
            if (releaseSettings.enableAndroidOptimize) {
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-internal.pro'
            }
            matchingFallbacks = ['release', 'debug']
            manifestPlaceholders.put(buildVariables.manifestPlaceholder.crashCollectionEnabled, true)
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
        release {
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled releaseSettings.minifyEnabled
            shrinkResources releaseSettings.shrinkResources
            if (releaseSettings.enableAndroidOptimize) {
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-release.pro'
            }
            matchingFallbacks = ['staging', 'debug']
            manifestPlaceholders.put(buildVariables.manifestPlaceholder.crashCollectionEnabled, true)
            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }
        }
    }

    productFlavors {
        staging {
            dimension "environment"
            applicationIdSuffix ".android.staging"
            versionNameSuffix ".${application.versionCode}-staging"
            def baseUrl = "api.publicapis.org"
            buildConfigField('String', buildConfig.defaultLanguage, buildConfigString("en"))
            buildConfigField('String', buildConfig.baseUrl, buildConfigString(createBaseURL(baseUrl,true)))
            manifestPlaceholders.put(buildVariables.manifestPlaceholder.usesCleartextTraffic, false)
        }
        dev {
            dimension "environment"
            applicationIdSuffix ".android.dev"
            versionNameSuffix ".${application.versionCode}-dev"
            def baseUrl = "api.publicapis.org"
            buildConfigField('String', buildConfig.defaultLanguage, buildConfigString("en"))
            buildConfigField('String', buildConfig.baseUrl, buildConfigString(createBaseURL(baseUrl,true)))
            manifestPlaceholders.put(buildVariables.manifestPlaceholder.usesCleartextTraffic, false)
        }
        local {
            dimension "environment"
            applicationIdSuffix ".android.dev"
            versionNameSuffix ".${application.versionCode}-local"
            def baseUrl = "api.publicapis.org"
            buildConfigField('String', buildConfig.defaultLanguage, buildConfigString("en"))
            buildConfigField('String', buildConfig.baseUrl, buildConfigString(createBaseURL(baseUrl,true)))
            manifestPlaceholders.put(buildVariables.manifestPlaceholder.usesCleartextTraffic, true)
        }
        production {
            dimension "environment"
            def baseUrl = "api.publicapis.org"
            buildConfigField('String', buildConfig.defaultLanguage, buildConfigString("en"))
            buildConfigField('String', buildConfig.baseUrl, buildConfigString(createBaseURL(baseUrl,true)))
            manifestPlaceholders.put(buildVariables.manifestPlaceholder.usesCleartextTraffic, false)
        }
    }

    buildFeatures {
        dataBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = buildOptions.composeVersion
    }

    compileOptions {
        sourceCompatibility buildOptions.compileOptionsVersion
        targetCompatibility buildOptions.jvmVersion
    }

    kotlin {
        jvmToolchain(11)
    }

    def variantFilterSkipMap = [
            stagingRelease    : true,
            devRelease        : true,
            localDebug        : true,
            localInternal     : true,
            localRelease      : true,
            productionDebug   : true,
            productionInternal: true,
    ]

    variantFilter { variant ->
        setIgnore(variantFilterSkipMap[variant.name] ?: false)
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "App-V${application.versionName}.${application.versionCode}-${variant.name.capitalize()}.apk"
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${plugin.protobuf}"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}

dependencies {
    implementation "androidx.collection:collection-ktx:${versions.collection}"
    implementation "androidx.core:core-ktx:${versions.core}"
    implementation "androidx.datastore:datastore:${versions.datastore}"
    implementation "androidx.hilt:hilt-navigation-compose:${versions.hiltCompose}"
    implementation "androidx.lifecycle:lifecycle-common-java8:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
    implementation "androidx.paging:paging-runtime-ktx:${versions.paging}"
    implementation "androidx.room:room-ktx:${versions.room}"
    implementation "androidx.room:room-runtime:${versions.room}"
    implementation "com.google.dagger:hilt-android:${versions.hilt}"
    implementation "com.google.protobuf:protobuf-javalite:${versions.protobuf}"
    implementation "com.jakewharton.timber:timber:${versions.timber}"
    implementation "com.squareup.moshi:moshi-kotlin:${versions.moshi}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.logging}"
    implementation "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"

    def composeBom = platform('androidx.compose:compose-bom:2023.04.01')
    implementation composeBom
    androidTestImplementation composeBom
    implementation "androidx.compose.material3:material3"
    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.ui:ui-tooling-preview"
    debugImplementation "androidx.compose.ui:ui-tooling"
    implementation "androidx.compose.material:material-icons-core"
    implementation "androidx.compose.material:material-icons-extended"
    implementation "androidx.compose.material3:material3-window-size-class"
    implementation "androidx.activity:activity-compose:${versions.activityCompose}"
    implementation "androidx.compose.runtime:runtime-livedata"
    implementation "androidx.compose.runtime:runtime-rxjava2"

    // Accompanist
    implementation "com.google.accompanist:accompanist-navigation-animation:${versions.accompanist}"
    implementation "com.google.accompanist:accompanist-navigation-material:${versions.accompanist}"
    implementation "com.google.accompanist:accompanist-swiperefresh:${versions.accompanist}"
    implementation "com.google.accompanist:accompanist-placeholder-material:${versions.accompanist}"
    implementation "com.google.accompanist:accompanist-pager:${versions.accompanist}"
    implementation "com.google.accompanist:accompanist-permissions:${versions.accompanist}"
    implementation "com.google.accompanist:accompanist-systemuicontroller:${versions.accompanist}"

    kapt "androidx.room:room-compiler:${versions.room}"
    kapt "com.google.dagger:hilt-android-compiler:${versions.hilt}"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}"

    //TEST DEPENDENCIES
    testImplementation "junit:junit:${testVersions.junit}"

    androidTestImplementation "androidx.test.espresso:espresso-core:${testVersions.espresso}"
    androidTestImplementation "androidx.test.ext:junit:${testVersions.testJUnit}"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4"
    debugImplementation "androidx.compose.ui:ui-test-manifest"
}

// Allow references to generated code
kapt {
    correctErrorTypes true
}

apply from: "quick_start.gradle"

task QuickStartProject{
    def newPackageName = "com.rahul.compose.architecture"
    def rootProjectName = "Android Compose Architecture"
    quickSetup.execute(newPackageName,rootProjectName)
}
